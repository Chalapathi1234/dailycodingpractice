prob-1:
  https://leetcode.com/problems/flood-fill/
solution:
  class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        if(image[sr][sc]==newColor){
            return image;
        }
        int x=image[sr][sc];
        f(image,sr,sc,x,newColor);
        return image;
    }
     public void f(int image[][],int sr,int sc,int x,int newColor){
        if(sr<0 || sc<0 || sr>= image.length || sc >=image[sr].length || image[sr][sc] !=x) return;
         image[sr][sc]=newColor;
        f(image,sr+1,sc,x,newColor);
        f(image,sr-1,sc,x,newColor);
        f(image,sr,sc+1,x,newColor);
        f(image,sr,sc-1,x,newColor);
         return;
     }   
}
   
prob-2:
    https://leetcode.com/problems/clone-graph/
solution:
     /*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node==null){
            return null;
        }
        HashMap<Node,Node> map = new HashMap<Node,Node>();
        return f(node,map);
    }
    public Node f(Node node,Map<Node,Node> map){
        if (map.containsKey(node)) {
            return map.get(node);
        }
        Node z = new Node(node.val);
        map.put(node,z);
        for(Node v : node.neighbors){
            Node a=f(v,map);
            z.neighbors.add(a);
        }
        return z;
    }
}
